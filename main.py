import os
import asyncpg
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    CallbackContext,
    MessageHandler,
    filters
)
from telegram.constants import ParseMode
from dotenv import load_dotenv
load_dotenv()

API_KEY = os.getenv("API_KEY")
TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
YKASSA_SHOP_ID = os.getenv("YKASSA_SHOP_ID")
YKASSA_SECRET_KEY = os.getenv("YKASSA_SECRET_KEY")

ADMINS = [2125819462, 5821566525]

async def connect_db():
    return await asyncpg.create_pool(DATABASE_URL)

# /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()

    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å! üöÄ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."

    keyboard = [
        [InlineKeyboardButton("üß∞ –£—Å–ª—É–≥–∏", callback_data="services")],
        [InlineKeyboardButton("üõ† –ü–æ–º–æ—â—å", callback_data="help")]
        
    ]
    if user_id in ADMINS:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')])

    if update.callback_query:
        await update.callback_query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def back_to_menu(update: Update, context: CallbackContext):
    context.user_data.clear()
    query = update.callback_query
    await query.answer()

    user_id = update.effective_user.id
    user_name = update.effective_user.first_name
    text = f"üëã –ü—Ä–∏–≤–µ—Ç, {user_name}!\n\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à —Å–µ—Ä–≤–∏—Å! üöÄ\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."

    keyboard = [
        [InlineKeyboardButton("üß∞ –£—Å–ª—É–≥–∏", callback_data="services")],
        [InlineKeyboardButton("üõ† –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    if user_id in ADMINS:
        keyboard.append([InlineKeyboardButton("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", callback_data='admin_panel')])

    await query.edit_message_text(text=text, reply_markup=InlineKeyboardMarkup(keyboard))

async def admin_panel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é", callback_data="add_privilege")],
        [InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é", callback_data="delete_privilege")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')],
    ]
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("‚öôÔ∏è –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:", reply_markup=InlineKeyboardMarkup(keyboard))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–∞–∂–¥–æ–π –∫–Ω–æ–ø–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
async def handle_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')],
    ]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ callback
    await update.callback_query.answer()

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    message = (
        "üìû **–ö–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏**:\n\n"
        "üë®‚Äçüíª –î–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @Tak1xgami.\n"
    )
    await update.callback_query.edit_message_text(
        message, 
        parse_mode='Markdown',  # –ò—Å–ø–æ–ª—å–∑—É–µ–º markdown –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def handle_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    data = query.data

    await query.answer()

    if data == "add_privilege":
        context.user_data["state"] = "ADD_PRIVILEGE_TITLE"
        keyboard = [
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_panel')],
        ]
        await query.edit_message_text("üìõ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard))

    elif data == "delete_privilege":
        pool = await connect_db()
        async with pool.acquire() as conn:
            privileges = await conn.fetch("SELECT id, title, price FROM privileges")

        keyboard = [
            [InlineKeyboardButton(
                f"üóëÔ∏è {i+1}. {priv['title']} ‚Äî {priv['price']}‚ÇΩ",
                callback_data=f"confirm_delete_{priv['id']}"
            )]
            for i, priv in enumerate(privileges)
        ]
        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_panel")])

        await query.edit_message_text(
            "üóëÔ∏è <b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode=ParseMode.HTML
        )

    elif data.startswith("confirm_delete_"):
        priv_id = int(data.split("_")[-1])

        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"delete_{priv_id}")],
            [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="delete_privilege")]
        ]
        await query.edit_message_text("üî¥ –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø—Ä–∏–≤–∏–ª–µ–≥–∏—é?", reply_markup=InlineKeyboardMarkup(keyboard))

    elif data.startswith("delete_"):
        priv_id = int(data.split("_")[-1])
        pool = await connect_db()
        async with pool.acquire() as conn:
            await conn.execute("DELETE FROM privileges WHERE id = $1", priv_id)

        await start(update, context)
        await query.edit_message_text("‚úÖ –ü—Ä–∏–≤–∏–ª–µ–≥–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")

async def handle_text(update: Update, context: CallbackContext):
    state = context.user_data.get("state")

    if not update.message:
        return  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤—Å—ë, —á—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º

    if state == "ADD_PRIVILEGE_TITLE":
        context.user_data["priv_title"] = update.message.text
        context.user_data["state"] = "ADD_PRIVILEGE_DESCRIPTION"
    
        await update.message.reply_text("üìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏:")

    elif state == "ADD_PRIVILEGE_DESCRIPTION":
        context.user_data["priv_description"] = update.message.text
        context.user_data["state"] = "ADD_PRIVILEGE_PRICE"
        await update.message.reply_text("üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏ (–≤ —Ä—É–±–ª—è—Ö):")

    elif state == "ADD_PRIVILEGE_PRICE":
        try:
            price = int(update.message.text)
            context.user_data["priv_price"] = price

            pool = await connect_db()
            async with pool.acquire() as conn:
                await conn.execute(
                    "INSERT INTO privileges (title, description, price) VALUES ($1, $2, $3)",
                    context.user_data["priv_title"],
                    context.user_data["priv_description"],
                    context.user_data["priv_price"]
                )

            await update.message.reply_text("‚úÖ –ü—Ä–∏–≤–∏–ª–µ–≥–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            await start(update, context)
            context.user_data["state"] = None
        except ValueError:
            await update.message.reply_text("üö´ –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
    else:
        await update.message.reply_text("üí¨ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é.")

async def handle_privileges(update: Update, context: ContextTypes.DEFAULT_TYPE):
    pool = await connect_db()
    async with pool.acquire() as conn:
        privileges = await conn.fetch("SELECT id, title, description, price FROM privileges")

    if not privileges:
        text = "‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–≤–∏–ª–µ–≥–∏–π."
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='services')]]
    else:
        text = "<b>üéñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–∏–≤–∏–ª–µ–≥–∏–∏:</b>\n\n"
        keyboard = []

        for i, priv in enumerate(privileges, 1):
            title = priv["title"]
            description = priv["description"].strip()
            price = f"{priv['price']:,}".replace(",", " ")  # 1440 -> 1 440

            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è ‚Äî –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞—á–∏–Ω–∞–µ–º —Å —Ç–∏—Ä–µ
            desc_lines = "\n".join(f"‚Ä¢ {line.strip()}" for line in description.splitlines() if line.strip())

            text += (
                f"<b>{i}. {title}</b>\n"
                f"{desc_lines}\n"
                f"<i>–¶–µ–Ω–∞:</i> <b>{price}‚ÇΩ</b>\n\n"
            )

            keyboard.append([InlineKeyboardButton(f"üíé {title}", callback_data=f"buy_privilege_{priv['id']}")])

        keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='services')])

    await update.callback_query.answer()
    await update.callback_query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode=ParseMode.HTML
    )

async def handle_services(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üéñ –ü—Ä–∏–≤–∏–ª–µ–≥–∏–∏", callback_data="privileges")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data='back_to_menu')],
    ]
    await update.callback_query.answer()
    await update.callback_query.edit_message_text("üß∞ –£—Å–ª—É–≥–∏: –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥ —Å–µ—Ä–≤–µ—Ä–∞.", reply_markup=InlineKeyboardMarkup(keyboard))

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
def main():
    app = Application.builder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_help, pattern="^help$"))
    app.add_handler(CallbackQueryHandler(handle_services, pattern="^services$"))
    app.add_handler(CallbackQueryHandler(back_to_menu, pattern="^back_to_menu$"))
    app.add_handler(CallbackQueryHandler(admin_panel, pattern="^admin_panel$"))
    app.add_handler(CallbackQueryHandler(handle_callback, pattern="^add_privilege$"))
    app.add_handler(CallbackQueryHandler(handle_privileges, pattern="^privileges$"))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(CallbackQueryHandler(handle_text, pattern="^delete_privilege$"))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))
    app.run_polling()

if __name__ == "__main__":
    main()